@using PI.Domain.ViewModel.Machine;
@model MachineDetailsViewModel
<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VisuData</title>

    <!-- Icone da aba -->
    <link rel="shortcut icon" href="~/assets/Img/favicon-white.ico" type="image/x-icon" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <link href="~/assets/Icons/bootstrap-icons/bootstrap-icons.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/assets/styles/info.css"/>
    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/dfbf29b648.js" crossorigin="anonymous"></script>

</head>

<body>
    <header>
        <div class="row mx-auto">
            <div class="col-1 backButton">
                <a asp-action="Home" asp-controller="Enterprise">
                    <img src="~/assets/icons/SVGIcons/volta-2.svg" alt="voltar">
                </a>
            </div>
            <div class="col-9 titleInfo ">Modelo: @Model.Model</div>
            <div class="col-2 justify-content-center editBox">
                <a asp-action="Edit" asp-route-id="@Model.Id">
                    <i class="bi bi-pencil-square fa-2x"></i>
                </a>
            </div>
        </div>

    </header>
    <main>
        <div class="container text-center">
            <div class="row row-cols-3">
                <!-- Não remover os espaços do span-->
                <div class="col" >Temperatura</div>
                <div class="col">Ruído</div>
                <div class="col">Vibração</div>
                <!-- apenas alterar o final da class do span -->
                <div class="col buttons">
                    @Model.RealTimeTemp ºC
                    <span class="@Model.TempStyle.ToString()"> </span>
                </div>
                <div class="col buttons"> 
                    @Model.RealTimeNoise Hz
                    <span class="@Model.NoiseStyle.ToString()"> </span>
                </div>
                <div class="col buttons">
                    @Model.RealTimeVibration dB
                    <span class="@Model.VibrationStyle.ToString()"> </span>
                </div>
            </div>
        </div>
        <div id="graphic" class="" style="margin-top: 300px">
        </div>
        <div class="container text-center">
            <div class="row input-group-text">
                <div class="col">
                    <input class="form-check-input mt-1 " type="checkbox" id="tempCheckBox" value="temperatura" aria-label="Checkbox for following text input">
                    Temperatura
                </div>
                <div class="col">
                    <input class="form-check-input mt-1" type="checkbox" value="ruido" id="noiseCheckbox" aria-label="Checkbox for following text input">
                    Ruído
                </div>
                <div class="col">
                    <input class="form-check-input mt-1" id="vibrationCheckbox" type="checkbox" value="vibracao" aria-label="Checkbox for following text input">
                    Vibração
                </div>
            </div>
        </div>
    </main>
    <footer>
        <div class=" text-center">
            <div class=" container text-center ">
                <div class="row">
                    <div class="col statusAction">
                        <span class="badge text-bg--blue-color-bg button ">Tempo real</span>
                    </div>
                    <div class="col statusAction">
                        <a asp-action="Register" asp-controller="Machine" asp-route-id="@Model.Id">
                            <span class="badge text-bg--blue-color-bg button ">Histórico</span>
                        </a>
                    </div>
                    <div class="col statusAction">
                        <a asp-action="DownloadLogDataOfMachine" asp-route-id="@Model.Id">
                            <span class="badge text-bg--blue-color-bg button ">Exportar</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="row-cols-1 container especContainer">
                <div class="container text-center">
                    <div class="row">
                        <div class="col statusEspe"><p>Marca:</p>  @Model.Brand</div>
                        <div class="col statusEspe"><p>Modelo:</p>  @Model.Model</div>
                        <div class="col statusEspe"><p>Série:</p> @Model.SerialNumber</div>
                    </div>
                    <div class="row">
                        <div class="col statusEspe"><p>Tag:</p> @Model.Tag</div>
                        <div class="col statusEspe"><p>Categoria:</p>  @Model.Category</div>
                        <div class="col statusEspe">
                            <p>Status:</p>  @Model.StatusName
                            <span class="@Model.StatusNameStyle.ToString()"> </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </footer>
</body>
</html>


<!-- <script src="../node_modules/chart.js/dist/chart.umd.js"></script> -->
<script type="module" src="~/lib/chart.js/dist/chart.umd.js"></script>
<script type="module" src="~/lib/chart.js/dist/chart.js"> </script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

    const ctx = document.getElementById('chart-line');
    //console.log(ctx);
    //$.ajax({
    //    type: 'GET',
    //    URL: 'machine/DetailsAboutMachineAjaxHandler/1?status=temperatura',
    //    dataType: "json",
    //    success: function (response) {
    //        console.log(response);
    //    }
    //});
    //const data = {
    //    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
    //    datasets: [{
    //        axis: 'y',
    //        label: 'My First Dataset',
    //        data: [65, 59, 80, 81, 56, 55, 40],
    //        fill: false,
    //        backgroundColor: [
    //            'rgba(255, 99, 132, 0.2)',
    //            'rgba(255, 159, 64, 0.2)',
    //            'rgba(255, 205, 86, 0.2)',
    //            'rgba(75, 192, 192, 0.2)',
    //            'rgba(54, 162, 235, 0.2)',
    //            'rgba(153, 102, 255, 0.2)',
    //            'rgba(201, 203, 207, 0.2)'
    //        ],
    //        borderColor: [
    //            'rgb(255, 99, 132)',
    //            'rgb(255, 159, 64)',
    //            'rgb(255, 205, 86)',
    //            'rgb(75, 192, 192)',
    //            'rgb(54, 162, 235)',
    //            'rgb(153, 102, 255)',
    //            'rgb(201, 203, 207)'
    //        ],
    //        borderWidth: 1
    //    }]
    //};


    $("#tempCheckBox").click(function () {
        if ($(this).is(':checked')) {
            $("#noiseCheckbox").prop('checked', false);
            $("#vibrationCheckbox").prop('checked', false);

            fetch('/machine/DetailsAboutTempAjaxHandler/' + @Model.Id.ToString(), {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'content-type': 'application/json'
                }
            }).then((response) => response.json())
                .then((data) => {
                    document.getElementById('graphic').style = null;
                    document.getElementById('graphic').innerHTML = '<canvas id="chart-line" height="320" width="400">< /canvas>';

                    let arrayLength = data.graphicValues.length;
                    console.log(data);
                    const hours = data.graphicValues.map(function (index) {
                        return index.hour
                    });
                    const tempValues = data.graphicValues.map(function (index) {
                        return index.value
                    });

                    new Chart(
                        document.getElementById('chart-line'),
                        {
                            type: 'line',
                            data: {
                                labels: hours,
                                datasets: [
                                    {
                                        label: 'Temperatura / hora',
                                        data: tempValues
                                    }
                                ]
                            }
                        }
                    );



                });
        }
    });

    $("#noiseCheckbox").click(function () {
        if ($(this).is(':checked')) {
            $("#tempCheckBox").prop('checked', false);
            $("#vibrationCheckbox").prop('checked', false);

            fetch('/machine/DetailsAboutNoiseAjaxHandler/' + @Model.Id.ToString(), {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'content-type': 'application/json'
                }
            }).then((response) => response.json())
                .then((data) => {
                    document.getElementById('graphic').style = null;
                    document.getElementById('graphic').innerHTML = '<canvas id="chart-line" height="320" width="400">< /canvas>';

                    let arrayLength = data.graphicValues.length;
                    console.log(data);
                    const hours = data.graphicValues.map(function (index) {
                        return index.hour
                    });
                    const tempValues = data.graphicValues.map(function (index) {
                        return index.value
                    });

                    console.log(hours);

                    new Chart(
                        document.getElementById('chart-line'),
                        {
                            type: 'line',
                            data: {
                                labels: hours,
                                datasets: [
                                    {
                                        label: 'Ruído / hora',
                                        data: tempValues
                                    }
                                ]
                            }
                        }
                    );

                });
        }
    });

    $("#vibrationCheckbox").click(function () {
        if ($(this).is(':checked')) {
            $("#noiseCheckbox").prop('checked', false);
            $("#tempCheckBox").prop('checked', false);

            fetch('/machine/DetailsAboutVibrationAjaxHandler/' + @Model.Id.ToString(), {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'content-type': 'application/json'
                }
            }).then((response) => response.json())
                .then((data) => {
                    document.getElementById('graphic').style = null;
                    document.getElementById('graphic').innerHTML = '<canvas id="chart-line" height="320" width="400">< /canvas>';

                    let arrayLength = data.graphicValues.length;
                    console.log(data);
                    const hours = data.graphicValues.map(function (index) {
                        return index.hour
                    });
                    const tempValues = data.graphicValues.map(function (index) {
                        return index.value
                    });

                    console.log(hours);

                    new Chart(
                        document.getElementById('chart-line'),
                        {
                            type: 'line',
                            data: {
                                labels: hours,
                                datasets: [
                                    {
                                        label: 'Vibração / hora',
                                        data: tempValues
                                    }
                                ]
                            }
                        }
                    );

                });
        }
    });


</script>